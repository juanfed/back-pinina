CREATE OR REPLACE FUNCTION f_fotos_publicacion_id(p_id_publicacion integer) RETURNS SETOF t_fotos_publicaciones AS
$$
Select * from t_fotos_publicaciones where id_publicacion = p_id_publicacion;
$$
language 'sql';

CREATE OR REPLACE FUNCTION f_comentario_id(p_id_comentario integer) RETURNS SETOF t_comentarios_publicaciones AS
$$
SELECT * FROM t_comentarios_publicaciones WHERE comentario_id = p_id_comentario;
$$
language 'sql';


CREATE OR REPLACE FUNCTION f_like_publicacion(p_id_publicacion	integer									
													) RETURNS setof t_publicaciones AS
$$
declare
likes integer;
begin
select likes_publicacion into likes from t_publicaciones where id_publicacion=p_id_publicacion;
likes := likes +1;
return query update t_publicaciones set likes_publicacion = likes where id_publicacion=p_id_publicacion returning *;
end
$$
language 'plpgsql';


drop table seguido_seguidores
create table seguido_seguidores(
	id_clientes integer not null,
	id_seguidor integer not null check (id_clientes<>id_seguidor) ,
	
	constraint seguido_seguidor_pk primary key(id_clientes, id_seguidor),
	constraint seguido_seguidores_id_clientes_fk foreign key(id_clientes) references t_clientes(id_clientes),
	constraint seguido_seguidores_id_seguidor_fk foreign key(id_seguidor) references t_clientes(id_clientes)

);

 create or replace function f_publicaciones_seguidos(p_seguidor_id integer) returns setof v_publicaciones_seguidor as
 $$
 SELECT p.id_publicacion,
    m.nombre_mascota,
    m.nivel_mascota,
    p.id_mascotas,
    p.fecha_publicacion,
    p.descripcion_publicacion,
    p.likes_publicacion,
    c.id_clientes,
    c.primer_nombre,
    c.primer_apellido,
    c.codigo_ubicacion_geografica_ciudad,
	case (select count(*) from t_seguidores where id_clientes=c.id_clientes and id_seguidor=p_seguidor_id) 
	when 1 then true
	else false
	end as seguido
   FROM t_publicaciones p
     JOIN t_clientes c ON p.id_clientes::numeric = c.id_clientes
     JOIN t_mascotas m ON m.id_mascotas = p.id_mascotas::numeric;
$$
language 'sql';


create function f_foto_perfil_mascota(p_id_mascotas integer) returns setof t_fotos_perfil_mascotas as
$$
select * from t_fotos_perfil_mascotas where id_mascotas = p_id_mascotas limit 1;
$$
language 'sql';

CREATE OR REPLACE FUNCTION f_insert_foto_perfil_mascota(
	p_ruta_guardado TEXT,
	p_nombre_imagen TEXT,
	p_id_mascotas NUMERIC,
	p_consecutivo NUMERIC
) RETURNS SETOF t_fotos_perfil_mascotas AS
$$
	INSERT INTO t_fotos_perfil_mascotas(ruta_guardado, nombre_imagen, id_mascotas, consecutivo)
	VALUES(p_ruta_guardado, p_nombre_imagen, p_id_mascotas, p_consecutivo) RETURNING*;
$$
language 'sql';


CREATE OR REPLACE FUNCTION f_seguir(p_id_clientes integer, p_id_seguidor integer) RETURNS SETOF t_seguidores AS
$$
INSERT INTO t_seguidores(id_clientes, id_seguidor) VALUES(p_id_clientes, p_id_seguidor) RETURNING *;
$$
language 'sql';


create table t_likes_publicacion(
	id_clientes integer not null,
	id_publicacion integer not null,
	constraint id_clientes_likes_fk foreign key(id_clientes) references t_clientes(id_clientes),
	constraint id_publicacion_likes_fk foreign key(id_publicacion) references t_publicaciones(id_publicacion),
	constraint clientes_likes_pk primary key(id_clientes, id_publicacion)
	
) 

CREATE OR REPLACE FUNCTION f_likes_publicacion(p_id_clientes integer, p_id_publicacion integer) RETURNS SETOF t_likes_publicacion AS
$$
INSERT INTO t_likes_publicacion(id_clientes, id_publicacion) VALUES(p_id_clientes, p_id_publicacion) RETURNING *;
$$
language 'sql';

CREATE OR REPLACE FUNCTION f_no_like_publicacion(p_id_publicacion	integer									
													) RETURNS setof t_publicaciones AS
$$
declare
likes integer;
begin
select likes_publicacion into likes from t_publicaciones where id_publicacion=p_id_publicacion;
likes := likes -1;
return query update t_publicaciones set likes_publicacion = likes where id_publicacion=p_id_publicacion returning *;
end
$$
language 'plpgsql';


CREATE OR REPLACE FUNCTION f_borrar_likes_publicacion(p_id_clientes integer, p_id_publicacion integer) RETURNS SETOF t_likes_publicacion AS
$$
delete from t_likes_publicacion where id_clientes=p_id_clientes and id_publicacion=p_id_publicacion RETURNING *;
$$
language 'sql';

CREATE OR REPLACE FUNCTION f_no_seguir(p_id_clientes integer, p_id_seguidor integer) RETURNS SETOF t_seguidores AS
$$
delete from t_seguidores where id_clientes=p_id_clientes and id_seguidor=p_id_seguidor RETURNING *;
$$
language 'sql';

CREATE OR REPLACE FUNCTION f_delete_comentario_publicacion(
	p_comentario_id integer
) RETURNS SETOF t_comentarios_publicaciones AS
$$
	DELETE FROM t_comentarios_publicaciones WHERE comentario_id = p_comentario_id RETURNING *;
$$
language 'sql';

create or replace view v_paises as select * from t_ubicaciones_geograficas where tipo = 'PA'

CREATE OR REPLACE FUNCTION f_cliente_correo(p_correo text) RETURNS SETOF t_clientes AS
$$
select * from t_clientes where correo = p_correo;
$$
language 'sql';

alter table t_clientes add constraint t_clientes_correo_unique unique (correo)

create or replace function f_create_cliente_registro( i_primer_nombre text, i_segundo_nombre text,
	i_primer_apellido text, i_segundo_apellido text,i_correo text,
	i_codigo_ubicacion_geografica_pais integer,
            i_contrase単a text ) returns setof t_clientes as
$$
DECLARE 
 BEGIN
 RETURN QUERY
 INSERT INTO t_clientes(primer_nombre,
	segundo_nombre, primer_apellido, segundo_apellido, correo,
	codigo_ubicacion_geografica_pais, password)
	
	VALUES ( i_primer_nombre, i_segundo_nombre,
	i_primer_apellido, i_segundo_apellido,i_correo,
	i_codigo_ubicacion_geografica_pais,
            i_contrase単a
	)
	
	RETURNING *;
 END;

$$
language 'plpgsql';

CREATE OR REPLACE FUNCTION f_eliminar_comentarios_likes_fotos(
	p_id_publicacion INTEGER
) RETURNS SETOF t_fotos_publicaciones AS
$$
	DELETE FROM t_comentarios_publicaciones WHERE id_publicacion =  p_id_publicacion;
	
	DELETE FROM t_likes_publicacion WHERE id_publicacion = p_id_publicacion;
	
	DELETE FROM t_fotos_publicaciones WHERE id_publicacion = p_id_publicacion RETURNING *;
$$
language 'sql';

CREATE OR REPLACE FUNCTION f_eliminar_publicacion(
	p_id_publicacion INTEGER
) RETURNS SETOF t_publicaciones AS
$$
	DELETE FROM t_publicaciones WHERE id_publicacion = p_id_publicacion RETURNING *;
$$
language 'sql';

CREATE OR REPLACE FUNCTION f_searcht_usuario_id(
	p_id_usuario INTEGER
) RETURNS SETOF t_usuario AS
$$
	SELECT * FROM t_usuario WHERE id_usuario = p_id_usuario;
$$
language 'sql';

CREATE OR REPLACE FUNCTION f_create_usuario_registro(
	p_tipo_identificacion INTEGER,
	p_identificacion VARCHAR(100),
	p_primer_nombre VARCHAR(100),
	p_segundo_nombre VARCHAR(100),
	p_primer_apellido VARCHAR(100),
	p_segundo_apellido VARCHAR(100),
	p_direccion TEXT,
	p_telefono VARCHAR(50),
	p_correo VARCHAR(200),
	p_contrase単a VARCHAR(150),
	p_codigo_ubicacion_geografica_pais INTEGER,
	p_codigo_ubicacion_geografica_departamento INTEGER,
	p_codigo_ubicacion_geografica_ciudad INTEGER,
	p_codigo_ubicacion_geografica_localidad INTEGER
)RETURNS SETOF t_usuario AS
$$
	INSERT INTO t_usuario(tipo, correo, password, origen_cuenta, estado, id_tipo_identificacion,
	identificacion, primer_nombre, segundo_nombre, primer_apellido, segundo_apellido, telefono,
	id_nivel_user, direccion, codigo_ubicacion_geografica_departamento,	codigo_ubicacion_geografica_ciudad,
	codigo_ubicacion_geografica_localidad, codigo_ubicacion_geografica_pais)
	VALUES('NO', p_correo, p_contrase単a, 1, 'S', p_tipo_identificacion, p_identificacion, p_primer_nombre,
	p_segundo_nombre, p_primer_apellido, p_segundo_apellido, p_telefono,
	1, p_direccion, p_codigo_ubicacion_geografica_departamento, p_codigo_ubicacion_geografica_ciudad,
	p_codigo_ubicacion_geografica_localidad, p_codigo_ubicacion_geografica_pais) RETURNING *;
$$
LANGUAGE 'sql'
